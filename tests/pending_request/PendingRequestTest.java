package pending_request;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

import java.io.IOException;

import javax.xml.soap.SOAPException;

import org.junit.Before;
import org.junit.Test;

import config.Environment;
import dcf_log.DcfLogParser;
import dcf_log.DcfResponse;
import soap.UploadCatalogueFileImpl;
import soap.UploadCatalogueFileImpl.PublishLevel;
import soap.UploadCatalogueFileImpl.ReserveLevel;
import user.DcfUser;

/**
 * Test that the pending requests generated by the upload catalogue file
 * calls are correct in the contents
 * @author avonva
 *
 */
public class PendingRequestTest {
	
	private Environment env;
	private DcfUser user;
	
	@Before
	public void init() {
		user = new DcfUser();
		user.login("avonva", "Ab123456");
		env = Environment.TEST;
	}
	
	@Test
	public void publishMinor() throws SOAPException, IOException {
		
		UploadCatalogueFileImpl ucf = new UploadCatalogueFileImpl();
		
		IPendingRequest request = ucf.publish(user, env, PublishLevel.MINOR, "ACTION");

		DcfResponse response = request.start(new DcfLogParser());
		
		assertNotNull(response);
	}
	
	
	@Test
	public void publishMajor() throws SOAPException, IOException {
		
		UploadCatalogueFileImpl ucf = new UploadCatalogueFileImpl();
		
		IPendingRequest request = ucf.publish(user, env, PublishLevel.MAJOR, "ACTION");

		DcfResponse response = request.start(new DcfLogParser());
		
		assertNotNull(response);
	}
	
	@Test
	public void reserveMinor() throws SOAPException, IOException {
		
		UploadCatalogueFileImpl ucf = new UploadCatalogueFileImpl();
		
		IPendingRequest request = ucf.reserve(user, env, ReserveLevel.MINOR, "ACTION", "Test upload catalogue file");

		DcfResponse response = request.start(new DcfLogParser());

		assertNotNull(response);
	}
	
	@Test
	public void reserveMajor() throws SOAPException, IOException {
		
		UploadCatalogueFileImpl ucf = new UploadCatalogueFileImpl();
		
		IPendingRequest request = ucf.reserve(user, env, ReserveLevel.MAJOR, "ACTION", "Test upload catalogue file");

		DcfResponse response = request.start(new DcfLogParser());
		
		assertNotNull(response);
	}

	@Test
	public void unreserveMinor() throws SOAPException, IOException {
		
		UploadCatalogueFileImpl ucf = new UploadCatalogueFileImpl();
		
		IPendingRequest request = ucf.unreserve(user, env, "ACTION", "Test upload catalogue file");

		DcfResponse response = request.start(new DcfLogParser());
		
		assertNotNull(response);
	}
	
	
	@Test
	public void pendingReserveMinor() throws SOAPException, IOException {
		
		UploadCatalogueFileImplMock ucf = new UploadCatalogueFileImplMock();
		
		IPendingRequest request = ucf.reserve(user, env, ReserveLevel.MINOR, "ACTION", "Test upload catalogue file");
		
		assertEquals(request.getType(), IPendingRequest.TYPE_RESERVE_MINOR);
		assertEquals(request.getRequestor(), user);
		assertEquals(request.getEnvironmentUsed(), env);
	}
	
	@Test
	public void pendingReserveMajor() throws SOAPException, IOException {
		
		UploadCatalogueFileImplMock ucf = new UploadCatalogueFileImplMock();
		
		IPendingRequest request = ucf.reserve(user, env, ReserveLevel.MAJOR, "ACTION", "Test upload catalogue file");
		
		assertEquals(request.getType(), IPendingRequest.TYPE_RESERVE_MAJOR);
		assertEquals(request.getRequestor(), user);
		assertEquals(request.getEnvironmentUsed(), env);
	}
	
	@Test
	public void pendingUnreserve() throws SOAPException, IOException {

		UploadCatalogueFileImplMock ucf = new UploadCatalogueFileImplMock();
		
		IPendingRequest request = ucf.unreserve(user, env, "ACTION", "Test upload catalogue file");
		
		assertEquals(request.getType(), IPendingRequest.TYPE_UNRESERVE);
		assertEquals(request.getRequestor(), user);
		assertEquals(request.getEnvironmentUsed(), env);
	}	
	
	@Test
	public void pendingPublishMinor() throws SOAPException, IOException {

		UploadCatalogueFileImplMock ucf = new UploadCatalogueFileImplMock();
		
		IPendingRequest request = ucf.publish(user, env, PublishLevel.MINOR, "ACTION");
		
		assertEquals(request.getType(), IPendingRequest.TYPE_PUBLISH_MINOR);
		assertEquals(request.getRequestor(), user);
		assertEquals(request.getEnvironmentUsed(), env);
	}
	
	@Test
	public void pendingPublishMajor() throws SOAPException, IOException {
		
		UploadCatalogueFileImplMock ucf = new UploadCatalogueFileImplMock();
		
		IPendingRequest request = ucf.publish(user, env, PublishLevel.MAJOR, "ACTION");
		
		assertEquals(request.getType(), IPendingRequest.TYPE_PUBLISH_MAJOR);
		assertEquals(request.getRequestor(), user);
		assertEquals(request.getEnvironmentUsed(), env);
	}
}
